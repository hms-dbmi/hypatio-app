# Generated by Django 4.2.21 on 2025-06-02 12:59

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MediaType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=255, unique=True, help_text="The value of the media type.")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Step',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, help_text='A description of the step. This is used to provide context to users about what the step entails.', null=True)),
                ('position', models.IntegerField(blank=True, null=True)),
                ('class_name', models.CharField(default='workflows.workflows.StepController', help_text='The fully-qualified class name for the step. This is used to determine how the step should be rendered and processed.', max_length=512)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_%(app_label)s.%(class)s_set+', to='contenttypes.contenttype')),

            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='FormStep',
            fields=[
                ('step_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='workflows.step')),
                ('form_class_name', models.CharField(blank=True, help_text='The fully-qualified class name for the Form for the step. This is used to determine if and how a Form class will be used to render and process.', max_length=512, null=True)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('workflows.step',),
        ),
        migrations.CreateModel(
            name='VideoStep',
            fields=[
                ('step_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='workflows.step')),
                ('video_url', models.TextField(help_text='The URL of the video to show in this step.')),
                ('thumbnail_url', models.TextField(blank=True, help_text='An optional thumbnail URL for the video. This can be used to show a preview of the video before it is played.', null=True)),
                ('autoplay', models.BooleanField(default=False, help_text='If true, the video will automatically start playing when the step is displayed.')),
                ('loop', models.BooleanField(default=False, help_text='If true, the video will loop when it reaches the end.')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('workflows.step',),
        ),
        migrations.CreateModel(
            name='FileUploadStep',
            fields=[
                ('step_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='workflows.step')),
                ('form_class_name', models.CharField(blank=True, help_text='The fully-qualified class name for the Form for the step. This is used to determine if and how a Form class will be used to render and process.', max_length=512, null=True)),
                ('max_file_size', models.BigIntegerField(default=2147483647, help_text='The maximum file size allowed for this step in bytes. Default is 2GB.')),
                ('s3_bucket', models.CharField(help_text='The S3 bucket where files for this step will be uploaded. Defaults to the first bucket configured in the setting `dbmi_settings.FILESERVICE_BUCKETS`.', max_length=255)),
                ('allowed_media_types', models.ManyToManyField(blank=True, help_text='The media types that are allowed for file uploads in this step. If empty, all media types are allowed.', to='workflows.mediatype')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('workflows.step',),
        ),
        migrations.CreateModel(
            name='Workflow',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, help_text='A description of the workflow. This is used to provide context to users about what the workflow entails.', null=True)),
                ('class_name', models.CharField(default='workflows.workflows.WorkflowController', help_text='The fully-qualified class name for the workflow. This is used to determine how the workflow should be rendered and processed.', max_length=512)),
                ('priority', models.IntegerField(default=0, help_text='Indicates the priority of this workflow. Lower numbers indicate higher priority. This is used to determine the order in which workflows are presented to users.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='WorkflowState',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed')], default='pending', help_text="The current status of the workflow. This can be 'pending' or 'completed'.", max_length=10)),
                ('started_at', models.DateTimeField(blank=True, help_text='The date and time when the workflow was started.', null=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='The date and time when the workflow was completed.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workflow_states', to=settings.AUTH_USER_MODEL)),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workflow', to='workflows.workflow')),
            ],
        ),
        migrations.CreateModel(
            name='StepState',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('current', 'Current'), ('completed', 'Completed')], default='pending', help_text="The current status of the step. This can be 'pending', 'current', or 'completed'.", max_length=10)),
                ('requires_approval', models.BooleanField(default=False, help_text='Set this to true if this step requires approval before it can be marked as completed.')),
                ('started_at', models.DateTimeField(blank=True, help_text='The date and time when the step was first current.', null=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='The date and time when the step was completed.', null=True)),
                ('approved_at', models.DateTimeField(blank=True, help_text='The date and time when the step was approved, if applicable.', null=True)),
                ('data', models.JSONField(blank=True, help_text='The data from this Step', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('step', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='state', to='workflows.step')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='step_states', to=settings.AUTH_USER_MODEL)),
                ('workflow_state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='step_states', to='workflows.workflowstate')),
            ],
        ),
        migrations.AddField(
            model_name='step',
            name='workflow',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='steps', to='workflows.workflow'),
        ),
        migrations.CreateModel(
            name='StepDependency',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('depends_on', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dependents', to='workflows.step')),
                ('step', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dependencies', to='workflows.step')),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='step_dependencies', to='workflows.workflow')),
            ],
            options={
                'unique_together': {('workflow', 'step', 'depends_on')},
            },
        ),
    ]
