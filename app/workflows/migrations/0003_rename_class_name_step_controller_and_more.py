# Generated by Django 4.2.23 on 2025-07-01 21:37

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('workflows', '0002_step_indefinite_workflowdependency'),
    ]

    operations = [
        migrations.RenameField(
            model_name='step',
            old_name='class_name',
            new_name='controller',
        ),
        migrations.RenameField(
            model_name='workflow',
            old_name='class_name',
            new_name='controller',
        ),
        migrations.RemoveField(
            model_name='stepstate',
            name='approved_at',
        ),
        migrations.RemoveField(
            model_name='stepstate',
            name='requires_approval',
        ),
        migrations.AddField(
            model_name='step',
            name='initialization_controller',
            field=models.CharField(blank=True, choices=[('workflows.controllers.initializations.RexplainVideoStepStateInitializationController', 'ReXplain Video Step State Initialization Controller')], help_text="The fully-qualified class name for the controller that will handle the initialization process. This is used to determine how the initialization should be processed and rendered. All subclasses of 'BaseStepInitializationController' defined in 'workflows.controllers.initializations' will be listed as choices.", max_length=512, null=True),
        ),
        migrations.AddField(
            model_name='step',
            name='initialization_message',
            field=models.TextField(default='Your current step on the DBMI Data Portal has been initialized and is ready for you to continue.', help_text='The message that users will receive when the current step has been initialized. The email will also include a link for the user to return to the step.'),
        ),
        migrations.AddField(
            model_name='step',
            name='initialization_notifications',
            field=models.BooleanField(default=True, help_text='If true, users will be notified when this step is initialized. This can be used to alert users that they can now complete the current step.'),
        ),
        migrations.AddField(
            model_name='step',
            name='initialization_required',
            field=models.BooleanField(blank=True, help_text='Marks this step as needing an administrator initialization before it can be started.', null=True),
        ),
        migrations.AddField(
            model_name='step',
            name='review_controller',
            field=models.CharField(blank=True, choices=[('workflows.controllers.review.RexplainFileUploadReviewController', 'Rexplain File Upload Review Controller')], help_text="The fully-qualified class name for the controller that will handle the review process. This is used to determine how the approval should be processed and rendered. All subclasses of 'BaseStepReviewController' defined in 'workflows.controllers.review' will be listed as choices.", max_length=512, null=True),
        ),
        migrations.AddField(
            model_name='step',
            name='review_message',
            field=models.TextField(default='Your recently completed step on the DBMI Data Portal has been reviewed. Please return to the dashboard to check the status of the step.', help_text='The default message that users will receive when the current step has been reviewed. The email will also include a link for the user to return to the step.'),
        ),
        migrations.AddField(
            model_name='step',
            name='review_notifications',
            field=models.BooleanField(default=True, help_text='If true, users will be notified when this step is reviewed. This can be used to alert users that they can now proceed to the next step.'),
        ),
        migrations.AddField(
            model_name='step',
            name='review_required',
            field=models.BooleanField(blank=True, help_text='Marks this step as needing an administrator review before it can be completed.', null=True),
        ),
        migrations.AlterField(
            model_name='stepstate',
            name='status',
            field=models.CharField(choices=[('pending', 'Pending'), ('uninitialized', 'Uninitialized'), ('current', 'Current'), ('unreviewed', 'Unreviewed'), ('completed', 'Completed'), ('indefinite', 'Indefinite')], default='pending', help_text='The current status of the step.', max_length=128),
        ),
        migrations.AlterField(
            model_name='workflowstate',
            name='status',
            field=models.CharField(choices=[('pending', 'Pending'), ('current', 'Current'), ('completed', 'Completed')], default='pending', help_text="The current status of the workflow. This can be 'pending' or 'completed'.", max_length=10),
        ),
        migrations.CreateModel(
            name='StepStateVersion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('version', models.IntegerField(editable=False, help_text='The version number of the StepState.')),
                ('data', models.JSONField(blank=True, editable=False, help_text='The data from this StepState at the time of this version.', null=True)),
                ('message', models.TextField(blank=True, help_text='An optional message describing the changes made in this version. This can be used to provide context or feedback on the changes made.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('step_state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='workflows.stepstate')),
            ],
        ),
        migrations.CreateModel(
            name='StepStateReview',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('rejected', 'Rejected'), ('approved', 'Approved')], help_text='The outcome status of the review.', max_length=255)),
                ('message', models.TextField(blank=True, help_text='An optional message describing the review of the step. This can be used to provide context or feedback on the decision made.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('decided_by', models.ForeignKey(help_text='The user who reviewed the step.', on_delete=django.db.models.deletion.CASCADE, related_name='step_reviews', to=settings.AUTH_USER_MODEL)),
                ('step_state', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='review', to='workflows.stepstate')),
            ],
        ),
        migrations.CreateModel(
            name='StepStateInitialization',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('data', models.JSONField(blank=True, help_text='The data from this Step Initialization. This can be used to store any data that is required to initialize the step.', null=True)),
                ('message', models.TextField(blank=True, help_text='An optional message describing the initialization of the step. This can be used to provide context or feedback on the actions made.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('initialized_by', models.ForeignKey(help_text='The user who initialized the step.', on_delete=django.db.models.deletion.CASCADE, related_name='step_initializations', to=settings.AUTH_USER_MODEL)),
                ('step_state', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='initialization', to='workflows.stepstate')),
            ],
        ),
    ]
